Перем ИмяФайлаСпискаБаз;
Перем ЭтоWindows;

Функция ЗаписатьРезультатВФайл(ИмяФайла, Данные)
	Текст = Новый ЗаписьТекста(ИмяФайла);
	Текст.Записать(Данные);
	Текст.Закрыть();
КонецФункции // ЗаписатьРезультатВФайл(ИмяФайла,Данные)

Функция ТекстИниФайла(ИниФайл)
	Если Не ИниФайл.Существует() Тогда
		ВызватьИсключение "Не найден файл " + ИниФайл.ПолноеИмя;
	КонецЕсли;
	ТекстИни = Новый ЧтениеТекста(ИниФайл.ПолноеИмя, "utf-8");
	Текст = ТекстИни.Прочитать();
	ТекстИни.Закрыть();
	Если ПустаяСтрока(Текст) Тогда
		ВызватьИсключение "Из файла ничего не прочитано"
	Иначе
		Возврат Текст;
	КонецЕсли;
КонецФункции

Функция ОбернутьВКавычки(Знач Строка)
	Если Лев(Строка, 1) = """" и Прав(Строка, 1) = """" Тогда
		Возврат Строка;
	Иначе
		Возврат """" + Строка + """";
	КонецЕсли;
КонецФункции

Функция ПутьБезКавычек(Знач Стр)
	Если Лев(Стр, 1) = """" и Прав(Стр, 1) = """" Тогда
		Возврат Сред(Стр,2,СтрДлина(Стр)-2);
	Иначе
		Возврат Стр;
	КонецЕсли;
КонецФункции // ПутьБезКавычек(Знач Стр)

Функция ДополнитьСтрокуСлешем(Стр, ВариантСлеша)
	Если (Прав(СокрЛП(Стр),1) = """") Тогда
		Если (Прав(СокрЛП(Стр),2) <> ВариантСлеша + """") Тогда
			Стр = Сред(СокрЛП(Стр),1,СтрДлина(СокрЛП(Стр))-1) + ВариантСлеша+ """";
		КонецЕсли;
	Иначе
		Стр = СокрЛП(Стр) + ?(Прав(СокрЛП(Стр),1)=ВариантСлеша,"",ВариантСлеша);
	КонецЕсли;

	Возврат Стр;
КонецФункции // ДополнитьСтрокуСлешем(Стр)

Функция ПутьСоСлешем(Стр)
	Возврат ДополнитьСтрокуСлешем(Стр, "/");
КонецФункции // ПутьССлешем()

Функция ПутьСоОбратнымСлешем(Стр)
	Возврат ДополнитьСтрокуСлешем(Стр, "\");
КонецФункции // ПутьССлешем()


//#Область  ПоискБаз

///	Возвращает структуру с данными соединения с базой
//
// Параметры:
//  ИмяБазы - Строка - Название базы в списке
//
// Возвращаемое значение:
//  Структура - Данные с параметрами базы
//  Неопределено - Не найдена база с указанным путем
//
Функция НайтиПоИмени(ИмяБазы) Экспорт
	СписокБаз = ПолучитьСписокБаз();
	Возврат СписокБаз[ИмяБазы];
КонецФункции // НайтиПоНаименовСписокБаз = ПолучитьСписокБаз();анию(ИмяБазы)


//("File", "\\my\db"); 
//("File", "c:\db"); 
//("File", "\\localhost\c$\work"); 
//("WS"  , "http://localhost/lessons/");
//("Srvr", "localhost:mydb");
//("Srvr", "localhost:443:mydb");

///	Возвращает структуру с данными соединения с базой
//
// Параметры:
//  Путь - Строка - Искомый путь в списке баз
//
// Возвращаемое значение:
//  Структура - Данные с параметрами базы
//  Неопределено - Не найдена база с указанным путем
//
Функция НайтиПоПути(Знач Путь) Экспорт
	СписокБаз = ПолучитьСписокБаз();

	ВариантБД = "";
	Если (СтрНачинаетсяС(Путь,"\\")) Тогда
		ВариантБД = "File";
		ПутьКБД = ОбернутьВКавычки(ПутьСоОбратнымСлешем(Путь));
	ИначеЕсли (Сред(Путь, 2, 1) = ":") Тогда
		ВариантБД = "File";
		ПутьКБД = ОбернутьВКавычки(ПутьСоОбратнымСлешем(Путь));
	ИначеЕсли СтрНачинаетсяС(Путь, "/") Тогда //linux
		ВариантБД = "File";
		ПутьКБД = ОбернутьВКавычки(ПутьСоСлешем(Путь));
	ИначеЕсли (СтрНачинаетсяС(Путь,"http://")) Тогда
		ВариантБД = "ws";
		ПутьКБД = ОбернутьВКавычки(ПутьСоСлешем(Путь));
	ИначеЕсли (СтрНачинаетсяС(Путь,"https://")) Тогда
		ВариантБД = "ws";
		ПутьКБД = ОбернутьВКавычки(ПутьСоСлешем(Путь));
	Иначе
		ВариантБД = "Srvr";
		ПутьКБД = Путь;
	КонецЕсли;
	ПутьКБД = ВРег(ПутьКБД);

	Для каждого Стр Из СписокБаз Цикл
		База = Стр.Значение;

		Если База.Свойство("Connect") Тогда
			СтрБ = База.Connect.Structure;

			Если (СтрБ.Свойство(ВариантБД)) Тогда
				Если ВариантБД = "File" Тогда
					Если ПутьСоОбратнымСлешем(ВРЕГ(СтрБ.File)) = ПутьКБД Тогда
						Возврат База;
					КонецЕсли;
				ИначеЕсли ВариантБД = "ws" Тогда
					Если ПутьСоСлешем(ВРЕГ(СтрБ.ws)) = ПутьКБД Тогда
						Возврат База;
					КонецЕсли;
				ИначеЕсли ВариантБД = "Srvr" Тогда
					Если ВРег(ПутьБезКавычек(СтрБ.Srvr) + ":" + ПутьБезКавычек(СтрБ.Ref)) = ПутьКБД Тогда
						Возврат База;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат Неопределено;
КонецФункции // НайтиПоПути(Путь) Экспорт


//#КонецОбласти

/// Возвращает путь к основному файлу списка баз
//
// Возвращаемое значение:
//	Строка - Путь к файлу пользовательскому ibases.v8i
//
Функция ПолучитьФайлНастроекПоУмолчанию() Экспорт
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(ВРег(СистемнаяИнформация.ВерсияОС), "WINDOWS") > 0;
	Если НЕ ЭтоWindows Тогда
		ЗначениеПеременной = ПолучитьПеременнуюСреды(ВРег("HOME"));
		ФайлСпискаБаз = Новый Файл(ОбъединитьПути(ЗначениеПеременной, ".1C/1cestart/ibases.v8i")).ПолноеИмя;
		Возврат ФайлСпискаБаз;
	Иначе
		Возврат ОбъединитьПути(ПолучитьПеременнуюСреды(ВРег("USERPROFILE")),
			"appdata\roaming\1c\1cestart\ibases.v8i");
	КонецЕсли;
КонецФункции // ПолучитьФайлНастроекПоУмолчанию() Экспорт

/// Устанавливает файл парсинга
//
// Параметры:
//  Источник - Строка - Путь к файлу *.v8i. Если параметр не указан берется основной файл пользователя
//
Процедура УстановитьФайл(Источник="") Экспорт
	ИмяФайлаСпискаБаз = Источник;
	Если СокрЛП(ИмяФайлаСпискаБаз) = "" Тогда
		ИмяФайлаСпискаБаз = ПолучитьФайлНастроекПоУмолчанию();
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьФайл() Экспорт
	Возврат ИмяФайлаСпискаБаз;
КонецФункции

///  Получает список баз из указанного файла
//
// Возвращаемое значение:
//  Соответствие - Список баз, где: Ключ - имя базы, Значение: Структура с параметрами соединения
//
Функция ПолучитьСписокБаз() Экспорт

	ИмяФайлаНастроек = ПолучитьФайл();

	Данные = ТекстИниФайла(Новый Файл(ИмяФайлаНастроек));
	РегВыражениеСписокБаз = новый РегулярноеВыражение("\[[^\]\r\n]+](?:\r?\n(?:[^\[\r\n].*)?)*");
	РегВыражениеЗначения = новый РегулярноеВыражение("(=|;)(?=(?:[^\""]*\""[^\""]*\"")*(?![^\""]*\""))");

	Базы = РегВыражениеСписокБаз.НайтиСовпадения(Данные);

	СписокБаз = Новый Соответствие;
	Для каждого База из Базы Цикл
		МассивСтр = СтрРазделить(База.Значение, Символы.ПС, Истина);
		СтруктураПути = Новый  Структура();
		Для каждого Стр из МассивСтр Цикл
			Стр = СокрЛП(Стр);
			Если СокрЛП(Стр) = "" Тогда
				Продолжить;
			КонецЕсли;
			Если (Лев(Стр, 1) = "[") Тогда
				СтруктураПути.Вставить("Name",Сред(Стр,2,СтрДлина(Стр)-2));
			ИначеЕсли ВРег(Лев(Стр, 7)) = ВРег("Connect") Тогда
				СтрАдрес = Сред(Стр,9);
				РезАдрес  = РегВыражениеЗначения.Разделить(СтрАдрес);
				СтруктураСоединения = Новый Структура();
				Если РезАдрес.Количество() = 5 
					Или РезАдрес.Количество() = 3 Тогда
					СтруктураСоединения.Вставить(РезАдрес[0],РезАдрес[2]);
				ИначеЕсли РезАдрес.Количество() = 9 Тогда
					СтруктураСоединения.Вставить(РезАдрес[0],РезАдрес[2]);
					СтруктураСоединения.Вставить(РезАдрес[4],РезАдрес[6]);
				КонецЕсли;

				СтруктураАдреса = Новый Структура;
				СтруктураАдреса.Вставить("String",Стр);
				СтруктураАдреса.Вставить("Structure",СтруктураСоединения);
				СтруктураПути.Вставить("Connect",СтруктураАдреса);
			Иначе
				ПозицияРавно = СтрНайти(Стр,"=");
				СтруктураПути.Вставить(Сред(Стр,1,ПозицияРавно-1),Сред(Стр,ПозицияРавно+1));
			КонецЕсли;

		КонецЦикла;
		СписокБаз.Вставить(СтруктураПути.Name,СтруктураПути);
	КонецЦикла;

	Возврат СписокБаз;
КонецФункции

///  Сохраняет данные списка баз
//
// Параметры:
//  ИмяИНИФайла - Строка - Имя файла для записи списка баз;
//  СписокБаз   - Соответствие - Список баз (получаются через ПолучитьСписокБаз).
//
// Возвращаемое значение:
//  Булево - Пока заглушка, всегда Истина
//
Функция ЗаписатьСписокБаз(СписокБаз, ИмяФайлаНастроек = "") Экспорт

	Если ИмяФайлаНастроек = "" Тогда
		ИмяФайлаНастроек = ПолучитьФайл();
	КонецЕсли;
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(ВРег(СистемнаяИнформация.ВерсияОС), "WINDOWS") > 0;
	Разделитель = ?(ЭтоWindows, Символы.ПС, Символы.ПС);
	Данные = "";
	Для каждого База Из СписокБаз Цикл
		СтруктураАдреса = База.Значение;
		Данные = Данные + Разделитель + "["+СтруктураАдреса["Name"]+"]";
		Для каждого Часть Из СтруктураАдреса Цикл
			
			Если Часть.Ключ = "Name" Тогда
				Продолжить; //Порядок может быть не соблюден, а записать [] надо
				//Данные = Данные + Разделитель + "[" + Часть.Значение + "]";
			ИначеЕсли Часть.Ключ = "Connect" Тогда
				Данные = Данные + Разделитель + СокрЛП(Часть.Значение.String);
			Иначе
				Если СокрЛП(Часть.Значение) <> "" Тогда
					Данные = Данные + Разделитель + Часть.Ключ + "=" + СокрЛП(Часть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Данные = Данные + Разделитель;
	КонецЦикла;

	ЗаписатьРезультатВФайл(ИмяФайлаНастроек, Данные);

	Возврат Истина;

КонецФункции // ЗаписатьСписокБаз()

/// Аналог Конструктора класса
//
Процедура Инициализация()
	ИмяФайлаСпискаБаз = ПолучитьФайлНастроекПоУмолчанию();
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(ВРег(СистемнаяИнформация.ВерсияОС), "WINDOWS") > 0;
КонецПроцедуры

Инициализация();